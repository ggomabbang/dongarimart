generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ClubList {            // 모집 중일 때 post와 1:1관계 추가 필요, PostId
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  clubName      String      @unique @db.VarChar(20)
  classification String     @db.VarChar(20)
  oneLine       String      @db.VarChar(100)
  short         String      @db.VarChar(500)
  isRecruiting  Boolean     @default(false) // mysql에는 tinyint로 적용
  recruitStart  DateTime?   @db.Date
  recruitEnd    DateTime?   @db.Date
  recruitTarget String?     @db.VarChar(100) // JSON
  pageURL       String?     @db.VarChar(256)
  image         String?     @db.VarChar(256)
  view          Int         @db.UnsignedInt
  createdAt     DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  updatedAt     DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  tags          ClubTag[]
  members       JoinedClub[]
}

model TagList {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  tagName       String      @unique @db.VarChar(20)
  createdAt     DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  clubs         ClubTag[]
}

model ClubTag {
  clubId        Int         @db.UnsignedInt
  tagId         Int         @db.UnsignedInt
  clubList      ClubList    @relation(fields: [clubId], references: [id])
  tagList       TagList     @relation(fields: [tagId], references: [id])

  @@id([clubId, tagId])
}

model User {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  username      String      @default("이름") @db.VarChar(20) // 실명 x
  email         String      @unique @db.VarChar(30)
  password      String      @default("0") @db.VarChar(256)
  emailVerified Boolean     @default(false)
  createdAt     DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  updatedAt     DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  clubs         JoinedClub[]
  posts         Post[]
  accounts      Account[]   // 임시
  sessions      Session[]   // 임시
}

model JoinedClub {
  userId        Int         @db.UnsignedInt
  clubId        Int         @db.UnsignedInt
  joinedAt      DateTime    @db.Date // 기존의 assignedAt
  isLeader      Boolean     @default(false)
  user          User        @relation(fields: [userId], references: [id])
  club          ClubList    @relation(fields: [clubId], references: [id])

  @@id([userId, clubId])
}

model Post {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt 
  userId        Int         @db.UnsignedInt
  title         String      @default("No title") @db.VarChar(100)
  content       String      @db.Text
  createAt      DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  updateAt      DateTime    @db.Timestamp(3) @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  isNotice      Boolean     @default(false)
  reportCount   Int         @default(0) @db.UnsignedInt
  view          Int         @default(0) @db.UnsignedInt
  user          User?       @relation(fields: [userId], references: [id])
}

model VerifyingEmail {
  email         String      @id @db.VarChar(30)
  token         String      @db.VarChar(256)
  verifiedDone  Boolean
}

// 임시 table
model Account {
  id                  String  @id @default(cuid())
  userId              Int      @db.UnsignedInt
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  @db.Text
  access_token        String?  @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.Text
  session_state       String?

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 임시 table
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      @db.UnsignedInt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 임시 table
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}