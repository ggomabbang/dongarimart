generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ClubList {            // 모집 중일 때 post와 1:1관계 추가 필요, PostId
  id            Int         @id @db.UnsignedInt @default(autoincrement()) 
  clubName      String      @unique @db.VarChar(20)
  classification String     @db.VarChar(20)
  oneLine       String      @db.VarChar(100)
  short         String      @db.VarChar(500)
  isRecruiting  Boolean     @default(false) 
  pageURL       String?     @db.VarChar(255)
  view          Int         @db.UnsignedInt @default(0)
  createdAt     DateTime    @db.Timestamp(3) @default(now())
  updatedAt     DateTime    @db.Timestamp(3) @updatedAt
  image         Image?
  schedule      RecruitSchedule?
  post          Post[]
  tags          ClubTag[]
  members       JoinedClub[]
}

model RecruitSchedule {
  clubId        Int         @id @db.UnsignedInt
  recruitStart  DateTime    @db.Date
  recruitEnd    DateTime    @db.Date
  club          ClubList    @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TagList {
  id            Int         @id @db.UnsignedInt @default(autoincrement()) 
  tagName       String      @unique @db.VarChar(20)
  createdAt     DateTime    @db.Timestamp(3) @default(now())
  clubs         ClubTag[]
}

model ClubTag {
  clubId        Int         @db.UnsignedInt
  tagId         Int         @db.UnsignedInt
  clubList      ClubList    @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagList       TagList     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([clubId, tagId])
}

model Post {
  id            Int         @id @db.UnsignedInt @default(autoincrement())  
  userId        Int?         @db.UnsignedInt
  clubId        Int?        @db.UnsignedInt
  title         String      @db.VarChar(100) @default("No title") 
  content       String      @db.Text
  createdAt     DateTime    @db.Timestamp(3) @default(now())
  updatedAt     DateTime    @db.Timestamp(3) @updatedAt
  isNotice      Boolean     @default(false)
  isRecruit     Boolean     @default(false)
  reportCount   Int         @db.UnsignedInt @default(0) 
  view          Int         @db.UnsignedInt @default(0) 
  image         Image[]
  recruit       Recruit?
  club          ClubList?   @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Image {
  id            Int         @id @db.UnsignedInt @default(autoincrement())
  filename      String      @unique @db.VarChar(50)
  createdAt     DateTime    @db.Timestamp(3) @default(now())
  postId        Int?        @db.UnsignedInt
  clubId        Int?        @unique @db.UnsignedInt
  post          Post?       @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  club          ClubList?   @relation(fields: [clubId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Recruit {
  postId        Int         @id @db.UnsignedInt
  recruitStart  DateTime    @db.Date
  recruitEnd    DateTime    @db.Date
  recruitURL    String?     @db.VarChar(1000)
  recruitTarget String?     @db.VarChar(1000)
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id            Int         @id @db.UnsignedInt @default(autoincrement()) 
  username      String      @unique @db.VarChar(20) @default("이름")  // 실명 x
  email         String      @unique @db.VarChar(30)
  password      String      @db.VarChar(256) 
  emailConfirm  Boolean     @default(false)
  createdAt     DateTime    @db.Timestamp(3) @default(now())
  updatedAt     DateTime    @db.Timestamp(3) @updatedAt
  token         RefreshToken?
  clubs         JoinedClub[]
  posts         Post[]
}

model JoinedClub {
  userId        Int         @db.UnsignedInt
  clubId        Int         @db.UnsignedInt
  joinedAt      DateTime    @db.Date
  isLeader      Boolean     @default(false)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  club          ClubList    @relation(fields: [clubId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, clubId])
}

model VerifyingEmail {
  email         String      @id @db.VarChar(30)
  token         String      @unique @db.VarChar(255)
  tokenExpires  DateTime    @db.Timestamp(3)
  verifiedDone  Boolean     @default(false)
}

model RefreshToken {
  userId        Int         @id @db.UnsignedInt
  token         String?     @db.Char(36)
  tokenExpires  DateTime?   @db.Timestamp(3)
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
}
